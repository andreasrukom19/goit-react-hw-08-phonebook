{"version":3,"file":"static/js/298.12c7cf53.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/FormAddContacts/FormAddContacts.module.css?70a8","components/FormAddContacts/FormAddContacts.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact-list-item\":\"ContactListItem_contact-list-item__xfxDY\",\"contact-del-btn\":\"ContactListItem_contact-del-btn__ayQlY\"};","import css from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ contact, handleDeleteContact }) => {\n  const { id, name, phone } = contact;\n  return (\n    <li className={css['contact-list-item']}>\n      <span>{name}:</span>\n      <span>{phone}</span>\n      <button\n        type=\"button\"\n        onClick={() => handleDeleteContact(id)}\n        className={css['contact-del-btn']}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact-list\":\"ContactList_contact-list__GnW-D\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst selectContacts = store => store.contactsGroup;\n\nexport const selectContactsItems = createSelector(selectContacts, contactsGroup => contactsGroup.items);\n\nexport const selectContactsFilter = createSelector(selectContacts, store => store.filter);\n\nexport const selectFilteredContacts = createSelector(\n  [selectContactsItems, selectContactsFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.trim().toLowerCase());\n    })\n  }\n)","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\nimport css from './ContactList.module.css';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = contactId => {\n    const action = deleteContact(contactId);\n    dispatch(action);\n  };\n\n  return (\n    <ul className={css['contact-list']}>\n      {filteredContacts.map(contact => {\n        return (\n          <ContactListItem\n            contact={contact}\n            key={contact.id}\n            handleDeleteContact={handleDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter-label\":\"Filter_filter-label__memAx\",\"filter-label-text\":\"Filter_filter-label-text__+jugc\",\"filter-input\":\"Filter_filter-input__dFgnI\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from './Filter.module.css';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { selectContactsFilter } from '../../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactsFilter);\n\n  const handleChangeFilter = event => {\n    const value = event.target.value;\n    const action = setFilter(value);\n    dispatch(action);\n  };\n\n  return (\n    <div>\n      <label className={css['filter-label']}>\n        <span className={css['filter-label-text']}>Find contacts by name</span>\n        <input\n          className={css['filter-input']}\n          type=\"text\"\n          name=\"keywords\"\n          onChange={handleChangeFilter}\n          value={filter}\n          placeholder=\"Search...\"\n        />\n      </label>\n    </div>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"contact-form\":\"FormAddContacts_contact-form__FtNV5\",\"contact-form-label\":\"FormAddContacts_contact-form-label__kamQo\",\"label-text\":\"FormAddContacts_label-text__qkSDO\",\"contact-form-input\":\"FormAddContacts_contact-form-input__HoNYX\",\"contact-form-btn\":\"FormAddContacts_contact-form-btn__WF9aE\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './FormAddContacts.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContactsItems } from '../../redux/contacts/selectors';\n\nexport const FormAddContacts = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItems);\n\n  const handleChangeName = event => {\n    setName(event.target.value);\n  };\n\n  const handleChangePhone = event => {\n    setPhone(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const hasDuplicateName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (!hasDuplicateName) {\n      const contactData = {\n        id: nanoid(),\n        name,\n        phone,\n      };\n      const action = addContact(contactData);\n      dispatch(action);\n      resetForm();\n    } else {\n      alert('A contact with this name already exists!');\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form className={css['contact-form']} onSubmit={handleSubmit}>\n      <label className={css['contact-form-label']}>\n        <span className={css['label-text']}>Name</span>\n        <input\n          className={css['contact-form-input']}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeName}\n          placeholder=\"Enter name\"\n          id={nanoid()}\n          required\n        />\n      </label>\n      <label className={css['contact-form-label']}>\n        <span className={css['label-text']}>Phone number</span>\n        <input\n          className={css['contact-form-input']}\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChangePhone}\n          placeholder=\"000-00-00\"\n          required\n        />\n      </label>\n      <button className={css['contact-form-btn']} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { FormAddContacts } from 'components/FormAddContacts/FormAddContacts';\nimport React from 'react';\n\nconst Contacts = () => {\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"page-title\">Phonebook</h1>\n      <FormAddContacts />\n      <h2 className=\"contact-title\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactListItem","_ref","contact","handleDeleteContact","id","name","phone","_jsxs","className","css","children","_jsx","type","onClick","selectContacts","store","contactsGroup","selectContactsItems","createSelector","items","selectContactsFilter","filter","selectFilteredContacts","contacts","toLowerCase","includes","trim","ContactList","dispatch","useDispatch","filteredContacts","useSelector","useEffect","fetchContacts","contactId","action","deleteContact","map","Filter","onChange","event","value","target","setFilter","placeholder","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","FormAddContacts","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setPhone","resetForm","onSubmit","preventDefault","some","alert","contactData","addContact","required"],"sourceRoot":""}